# -*- coding: utf-8 -*-
"""py_collections_sets_dictionaries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_cy3yXsDI-NrkrCr0rsVrEdS1z5kk7nS

# Conjuntos (sets)
"""

machine_learning_users = {15, 23, 43, 56}
data_science_users = {13, 23, 25, 43}

type(machine_learning_users)

machine_learning_users[3] # not indexable

for user in machine_learning_users:
    print(user)

machine_learning_users | data_science_users # Union

machine_learning_users & data_science_users # Intersection

machine_learning_users - data_science_users

15 in machine_learning_users

machine_learning_users ^ data_science_users

"""# Operações"""

users = {1, 5, 76, 34, 52, 13, 17} # Conjuntos são mutáveis

len(users)

users.append(13) # Nao existe posicao para inserir um item no final do conjunto dessa forma usamos add.

users.add(765) # Não e possível inserir números repetidos
len(users)

users

users_02 = frozenset(users) # frozenset transforma o conjunto em um objetio imutável.
users_02

type(users_02)

users_02.add(125)

my_text = "Welcome, my name is Igor i very like names and i have the my dog and very like dogs"
my_text.split()

set(my_text.split()) # Conjunto de string

"""# Dicionários """

# Map

marvel_characters = {
  "Iron Man" : 1,
  "Spider Man" : 3,
  "Thor" : 1,
  "Thanos": 2,
  "Kang" : 15
}

type(marvel_characters)

marvel_characters["Iron Man"]

marvel_characters["Spider Man"]

marvel_characters["Nick Fury"]

marvel_characters_02 = dict(IronMan = 1, SpiderMan = 3, Thor = 1) # Forma alternativa de criar dicionários, pouco ultilizada

marvel_characters = {
  "Iron Man" : 1,
  "Spider Man" : 3,
  "Thor" : 1,
  "Thanos": 2,
  "Kang" : 15
}

marvel_characters["Black Widow"] = 55

marvel_characters

marvel_characters["Black Widow"] = 20

marvel_characters

del marvel_characters["Thor"]

marvel_characters

"Kang" in marvel_characters

for character in marvel_characters:
    print(character)

for character in marvel_characters.keys():
    print(character)

for character in marvel_characters.values():
    print(character)

for character in marvel_characters:
    value = marvel_characters[character]
    print(character, value)

for character in marvel_characters.items():
    print(character)

for key, value in marvel_characters.items():
    print(key, "=" , value)

"""# Variações de dicionários"""

int()

from collections import defaultdict

my_text = "Welcome, my name is Igor i very like names and i have the my dog and very like dogs"
my_text = my_text.lower()

apparitions = defaultdict(int) # Inicializando dicionario com 0

for word in my_text.split():
    apparitions[word] += 1

apparitions

from collections import Counter # Contador de valores

my_text = "Welcome, my name is Igor i very like names and i have the my dog and very like dogs"
my_text = my_text.lower()

apparitions = Counter(my_text.split())
apparitions

"""# Praticando"""

text_01 = """ A trama de Vingadores: Ultimato se passa poucos dias depois do fim de Guerra Infinita: Thanos conseguiu o que queria, matou metade da população do universo e boa parte dos heróis que tentou impedi-lo, em vão. 
No entanto, surge uma possibilidade de reverter o que aconteceu, graças a dois fatores ausentes no conflito anterior: a Capitã Marvel (Brie Larson) e o Homem-Formiga (Paul Rudd).

Discutir muito mais coisas além disso significaria entregar elementos do enredo importantíssimos, e acredito que a surpresa ao chegar na sala de cinema faz parte da experiência. 
O que pode ser dito é: TODAS as teorias ventiladas na internet estão erradas. Todas, sem exceção.+

O que dá para discutir, e isso já foi mostrado nos trailers, é o sentimento de derrota que abateu não só os Vingadores, mas todo o mundo: as pessoas desistiram de tudo ao perderem seus entes queridos, 
e não conseguem seguir em frente. A humanidade... estagnou.

Mas como este é um filme de ação, baseado em heróis de quadrinhos, espere por muitas reviravoltas, piadinhas, um pouco de drama e batalhas épicas, que colocam as de Guerra Infinita no chinelo, 
e ficam no mesmo nível de grandiosidade do confronto final de Aquaman, curiosamente, o filme mais "ao estilo Marvel" que a DC já lançou.
"""

text_02 = """
Olá pessoal! Nesse post, vamos entender o funcionamento do incrível virtualenv, uma ferramenta simples e poderosa que permite criar ambientes isolados de desenvolvimento Python
Dessa forma é possível a utilização de diversas bibliotecas em um mesmo ambiente sem que haja conflitos entre elas.
O uso do virtualenv traz muitas vantagens e facilidades quando desenvolvemos em Python, principalmente na separação de ambientes de desenvolvimento.

Também nos ajuda muito na solução de conflitos entre versões de uma biblioteca e é essencial para o desenvolvimento de aplicações utilizando diferentes versões do Python em uma mesma máquina 
(sem ter que recorrer à máquinas virtuais, por exemplo) Caso você ainda não o utilize, eu aconselho a baixar o mais rápido possível e aproveitar ao máximo essa ferramenta poderosa e extremamente 
simples que eu acabei de apresentar a vocês.

Bom… Espero que tenham gostado! E se você achou interessante este post, e acha que ele facilitou a sua vida organizando seu ambiente Python, não se esqueça de deixar aqui seu comentário ou sugestão!
"""

def analyze_letters_frequency(text):
  apparitions_01 = Counter(text.lower())
  total_characters = sum(apparitions_01.values())

  proportions = [(letter, frequency / total_characters) for letter, frequency in apparitions_01.items()]
  proportions = Counter(dict(proportions))
  common = proportions.most_common(10)

  for character, proportion in common:
      print(f'{character} => {proportion * 100:.2f}%')

analyze_letters_frequency(text_01)

analyze_letters_frequency(text_02)

